name: build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest , windows-latest]
        build_type: [Debug]
        c_compiler: [gcc, cl]
        triplet: [x64-linux, x64-windows]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            triplet: x64-windows
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            triplet: x64-linux
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            triplet: x64-linux
          - os: ubuntu-latest
            c_compiler: cl
          - os: ubuntu-latest
            triplet: x64-windows
    steps:
      # cd current directory
      - uses: actions/checkout@v3

      # set build folder
      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      # install dependencies
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt install doxygen libglfw3 libglfw3-dev freeglut3-dev libxmu-dev libxi-dev libxcursor-dev libxinerama-dev libglew-dev mesa-utils libtbb-dev -y

      # vcpkg
      - name: vcpkg-action
        uses: johnwason/vcpkg-action@v5
        id: vcpkg
        with:
          manifest-dir: ${{ github.workspace }} # Set to directory containing vcpkg.json
          triplet: ${{ matrix.triplet }}
          token: ${{ github.token }}

      # run cmake
      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
          -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }}
          -S ${{ github.workspace }}

      # build
      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}